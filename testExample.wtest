import mutual.*
import viajes.*
import clasesGimnasia.*
import socios.*

describe "group of tests for viajes" {

  const primerViajeCiudad = new ExcursionACiudad(idiomas = [], cantidadAtracciones = 4)
  const primerViajeTropical = new ExcursionACiudadTropical(idiomas = [], cantidadAtracciones = 4)
  const segundoViajeCiudad = new ExcursionACiudad(idiomas = [], cantidadAtracciones = 8)
  const segundoViajeTropical = new ExcursionACiudadTropical(idiomas = [], cantidadAtracciones = 8)
  const tercerViajeTropical = new ExcursionACiudadTropical(idiomas = [], cantidadAtracciones = 10)

  const primerSalidaTrekking = new SalidaTrekking(idiomas = [], kmSenderos = 100, diasDeSolPorAñoLugar = 130)
  const segundaSalidaTrekking = new SalidaTrekking(idiomas = [], kmSenderos = 50, diasDeSolPorAñoLugar = 240)
  const tercerSalidaTrekking = new SalidaTrekking(idiomas = [], kmSenderos = 250, diasDeSolPorAñoLugar = 130)

  const tercerViajeCiudad = new ExcursionACiudad(idiomas = [], cantidadAtracciones = 5)
  const cuartaSalidaTrekking = new SalidaTrekking(idiomas = ["inles", "español", "chino"], kmSenderos = 250, diasDeSolPorAñoLugar = 150)

  test "primerViaje lleva 2 dias, no implica esfuerzo y no sirve para broncearse" {
    assert.notThat(primerViajeCiudad.implicaEsfuerzo())
    assert.notThat(primerViajeCiudad.sirveParaBroncearse())
    assert.equals(2, primerViajeCiudad.diasLleva())
  }
  test "primerViajeTropical lleva 3 dias, no implica esfuerzo y sirve para broncearse" {
    assert.notThat(primerViajeTropical.implicaEsfuerzo())
    assert.that(primerViajeTropical.sirveParaBroncearse())
    assert.equals(3, primerViajeTropical.diasLleva())
  }

  test "segundoViajeCiudad lleva 4 dias, implica esfuerzo y no sirve para broncearse" {
    assert.that(segundoViajeCiudad.implicaEsfuerzo())
    assert.notThat(segundoViajeCiudad.sirveParaBroncearse())
    assert.equals(4, segundoViajeCiudad.diasLleva())
  }

  test "segundoViajeTropical lleva 5 dias, implica esfuerzo y sirve para broncearse" {
    assert.that(segundoViajeTropical.implicaEsfuerzo())
    assert.that(segundoViajeTropical.sirveParaBroncearse())
    assert.equals(5, segundoViajeTropical.diasLleva())
  }

  test "tercerViajeTropical lleva 6 dias, no implica esfuerzo y sirve para broncearse" {
    assert.notThat(tercerViajeTropical.implicaEsfuerzo())
    assert.that(tercerViajeTropical.sirveParaBroncearse())
    assert.equals(6, tercerViajeTropical.diasLleva())
  }
  test "primerSalidaTrekking lleva 2 dias, implica esfuerzo y no sirve para broncearse" {
    assert.that(primerSalidaTrekking.implicaEsfuerzo())
    assert.notThat(primerSalidaTrekking.sirveParaBroncearse())
    assert.equals(2, primerSalidaTrekking.diasLleva())
  }
  test "segundaSalidaTrekking lleva 1 dias, no implica esfuerzo y sirve para broncearse" {
    assert.notThat(segundaSalidaTrekking.implicaEsfuerzo())
    assert.that(segundaSalidaTrekking.sirveParaBroncearse())
    assert.equals(1, segundaSalidaTrekking.diasLleva())
  }
  test "tercerSalidaTrekking lleva 1 dias, no implica esfuerzo y sirve para broncearse" {
    assert.that(tercerSalidaTrekking.implicaEsfuerzo())
    assert.that(tercerSalidaTrekking.sirveParaBroncearse())
    assert.equals(5, tercerSalidaTrekking.diasLleva())
  }

  test "tercerViajeCiudad lleva 2 dias, no implica esfuerzo y no sirve para broncearse es interesante porque tiene 5 atraaciones" {
    assert.that(tercerViajeCiudad.esInteresante())
  }

  test "cuartaSalidaTrekking es interesante porque tiene 150 dias al sol y 3 idiomas" {
    assert.that(cuartaSalidaTrekking.esInteresante())
  }
  // test SOCIOS 
  const viajesPlaya1 = new ViajesPlaya(idiomas = [], largoPlaya= 1000)
  const viajesPlaya2 = new ViajesPlaya(idiomas = [], largoPlaya= 2000)
  const roque = new Socio(actRealizadas = [viajesPlaya1, viajesPlaya2], maxActPuedeHacer = 2) 

  test "Roque adora el sol" {
    assert.that(roque.esAdoradorDelSol())
  }

}